JGSW:
+ Display notation on an HTML page
+ Display notation on an HTML page on someone's computer that doesn't have the Bravura Text font installed
+ Display a time signature object
+ Display note objects
+ Bar automatically
+ Beam automatically
+ Play the rhythm
+ Scroll to where you are as it plays. I think there is a jQuery `scrollTop` property?
+ Count off before playing
+ Accept input & grade!!

+ Store offset info in fractions of a beat, so that you can...
    + create formatters for counts, and
    + add tooltips for details on timing!
+ Make Count a real type to clean up
+ Space extra clap markings according to offset
+ Populate levels based on query strings, by reading from one big ts file
+ Random level generation, based on some parameters to allow for practice of specific skills.
+ Fix bug that causes tooltips to stick forever when they appear during playback (why show them during playback anyway?)
+ Set up local server
+ Load the site on your phone
+ Fix any existing issues
    + Disable iOS double-tap-to-zoom
    + Make tooltips closer to notes
    + Decrease notation size for low-width screens
    + Check for touch events so timing is accurate on mobile devices
+ Make tooltips click to show/hide on phone
    + AUTOMATIC! Thanks Safari for iOS and/or jQuery UI!
+ Hide key commands on phone

+ Show correct counts under the music on graded notes; color the ones that line up with notes & give them the same tooltips as the notes
+ Add a "Tap" button
+ Refactor timing & grading into `MusicEvent`
    + Get timing out of `Note`
    + Move `MusicEvent`s off of `Note` and into a separate `Piece.events` array
    + Get grading out of `Player`... and `Piece`
        + You'll probably need to make `Piece.events` into a custom class to do this
+ Grade beats, coloring beats in the counting
+ Make tooltips mention both beats and notes
+ Grade beats when beats occur
+ Add "extra beat" just like "extra clap"

+ Add a final score summary that appears after the piece is finished
+ Skill tree with requirement lines
+ Refactor `gameData.ts` to add `Skill`, which will have a list of `Level`s--by index, not ID (we'll now do `level.html?skill=something&level=0`)
+ Display levels list when clicking a skill, linking to each level
+ Test browser-local storage by allowing a name change
+ Make browser-local storage saves automatic & allow for registering callbacks
+ Use browser-local storage to save current level for each skill
    + Disable levels within each skill that are past current
    + Alter current level when passing one
    + Show progress bars in skills
    + Style skills: completed, current, locked (oof, that's a LOT of CSS...)
    + Disable entire skills based on requirements
+ Refactor `gameData.ts`--I think `Skill` needs to know its own `id` for most reasonable uses.

+ Rests
    + Pull out `updateTooltipForNoteAtIndex` from `updateAppearanceOfNoteAtIndex`
    + Create `NoteType.restCharacter`
    + Create `Event.shouldPerform` and update grading accordingly
        + Correctness = 0 if clap is nearby
        + All claps are listed as extra
    + Subclass `Note` to `Rest`
    + Create `shouldPerform = false` events for rests in the `Piece` constructor
    + Override `sound` to none
    + Override `notation` to return rest characters
    + Alter beaming logic in `Piece` to account for rests
    + Override `updateTooltipForNoteAtIndex` to provide clearer explanations for rests
+ Swap out ion.sound; it's broken and it's time for type safety anyway
    + Preload performance sounds, though
+ Add a working backing loop system
    + Can you scale to account for tempos?
    + Perfectly align scoring with backing loops (right now you have to rush to pass)
    + Flesh out your loop library: we need more time signatures!
    + Allow for multiple loops per time signature, and come up with a clever way of determining index into that array via skill ID and level number, so that it's not Just Random
+ Fix count placement: estimating for the final note using the previous note is totally ineffective; check eighth eighth dotted half for proof.
+ Fix extra problems caused by held key repeats
+ Only count rests if they're on a beat (hah--you made the same mistake your students do!)
+ Totally change scoring so that it's about getting 100%, not 65%. Remove the extras count--it's a weird thing to focus on and its prominence is just an artifact of your model classes.

+ Allow levels to specify values for `TimingDescription.knownCounts`, so we can avoid confusing people on early levels
+ Make `AnyLevel` interface for `Level` to implement and `Skill` to hold
+ Abstract the URL to link to to get to each level into `AnyLevel`
+ Make new `TextLevel` class that holds some HTML, links to a new "text.html" page, which will be pretty simple
+ Fix block system so it can disallow larger blocks from crossing certain boundaries (e.g. eighth/quarter/eighth syncopation starting on beat 2 of common time)
    + Can you add an "allowed start" property to blocks, which is by default "anywhere"?
    + Next, can you let some blocks be required, so that a random piece will be forced to use one of each required block?
+ Mark level types in the skill tree with an icon
+ Incorporate `Piece` constructor parameters directly into `LevelConstructor` to reduce nesting at creation
+ Your estimating just doesn't work; put a span around the final barline and use it for calculations, dangit.
+ Add "Final level in $skill!" to splash.
+ Make randomized pieces regenerate themselves when they're played! This makes them much more interesting!!
+ Make timing accuracy stars harder to earn
+ When you return to an open skill, scroll to the tooltip
+ Can you debounce the Clap & Tap buttons?
+ Show total levels in skill in the title bar for the start window
+ Make "Next Level" go directly to the next level
+ Show level icon on intro window

FOR RELEASE:
+ Finish the actual skill tree
+ Fix scrolling easing
+ Do not grade an extra foot tap, accurately timed for beat 1 after the piece ends, as wrong. This should actually be encouraged.
+ Fix beaming of pieces with 3rds in them--dang, that was a nasty hack. You had to round off a bunch of beat calculations to adjust for floating point errors.
+ Fix beaming of over-the-beat eighth notes (like EVERYTHING in the "More Faster Syncopation" skill)
+ Animation for celebrating when you complete a skill in the tree!
+ What makes world.html super-slow on load from finishing a skill sometimes, and it gets fixed instantly when you reload!? ARGH.
    + Oh. It's the filter: drop-shadow that I applied to my svg elements. Darn.
+ Switch from Rhythms to Bravura, because the creator of Rhythms didn't respond to your use request, and there are unfixable beaming bugs anyway
    + Convert notation code to use SMuFL
    + Adjust note height to compensate for vertical centering (you'd use combining staff positions, but they break horizontal spacing)
    + Create subset of Bravura Text with transfonter.org (necessary not just for efficiency, but because the real Bravura Text has invalid final section bounds)
    + Fix counting placement
    + Fix extra clap and extra tap placement
+ Add a warning at the start of the game about wireless headphones.
+ Check when scoring if it looks like the player's having latency issues, and warn about wireless headphones then.
+ Make an onboarding experience for the first few levels
    + Disable the 'clap' button for levels 1 and 2.
    + Flash the 'tap' and 'clap' buttons at appropriate times on the first skill.
+ Add the ability to display inline notation, so that you can include them in your descriptions.
    + Notes & rests
    + Time signatures
    + Comb through the whole darn skill tree looking for places to add these...
+ Add save URLs so students can switch computers, and so that you can use them as your proof of student progress
    + Add copy interface to profile editor
    + Create load page
    + Add % complete info to profiles so you can confidently update profiles
    + Remove unnecessary info from links
+ Allow special nodes to include multiple choice or matching quizzes (for note recognition & beat length in time signatures)
    + Make a new level format that displays a new page
    + Display a little form thing
    + Make a model class for multiple-choice questions
    + Pull out shared CSS for level splash
    + Generalize level pass/fail dialog
    + Pull out shared CSS for level pass/fail
    + Add new pass/fail info for this new quiz
    + Make initializer for note name quizzes
    + Make initializer for time signature quizzes
    + Make initializer for note relationship questions
    + Sprinkle these quizzes into the skill tree
+ Fix spacing bug: it seems that offscreen objects don't work with your count/clap placement code.
    + Is this your fault or a limitation of the browser? (A: It's a bug in JQueryUI.)
    + Is this related to the insane way Internet Explorer places counts? Yes. However, IE still needs work once it starts scrolling.
    + Update counting code
    + Remove horizontalOffset... and verticalOffset... completely in favor of your new position() method
+ Obfuscate links to prevent cheating
+ Add quizzes about the meanings of counts

TESTING:
    * On iPhone (Blake)
    * On slow iPhone (Mercutio)
    * On Chrome (Mac)
    * On Chrome (Windows)
    * On Firefox (Mac)
    - On Firefox (Windows)
    * On Internet Explorer
        + Create fallback bass drum sounds played & timed by YOU (the way you do your claps), because looping background tracks do not work if Howler falls back from WebAudio to HTML5.
        + Make the correct/incorrect tooltips in the quizzes actually work. (What the heck, IE!?)
        + Change Tap key command so that Windows doesn't yell about sticky keys
        + Fix skill tree centering
        + Fix time signatures (ligature issue?)
        + Fix count & extra clap placement (it's now correct... until it starts scrolling.)
        + Fix score summary layout (grid)
    - On Edge
    - On Android (what browsers?)

POST-RELEASE:
+ Make a "Revive" link to undo player deletion.
+ Make it much clearer in Welcome how to tap, how to clap, and that you should do both simultaneously
+ When attempting to load a duplicate profile, switch to it
+ Can you list completed skills & levels in some sort of pretty summary when loading a saved link?
- Add custom feedback for specific levels? Or just hardcode in some stuff for the beginning: you need specific checks for the first time they're asked to clap and tap simultaneously.
    - These specific level 3 "clap and tap simultaneously" explanations are REQUIRED for new players to succeed.
    - You may also need to encourage stuck players to click the "Grade Details" button, either for early levels, or all levels?
* Swing
    + Add swing support to time signatures
    - Adjust countoffs to use actual `Piece` timings instead of context-blind `TimeSignature.millliseconds` (to swing "rea-dy")
    - Write actual swing skills
- Randomly select from MANY grading summary messages; students will see them very frequently so they should be varied.
    - Include praise for hard work & suggestion of going back to earlier levels.
- Improve style and content of grading tooltips; focus on important content
- Add the ability to include a detailed explanation to a quiz question, and then calculate them for length quizzes, a little like you did for the Twine clone.
- MOAR LOOPS!!!11
- Can you check counts via speech recognition?
- Add timing precision and latency adjustment settings
+ Cancel scrolling of piece immediately when you click "Stop"
- Close tooltips on manual scroll of music in piece.html
- Create an option to practice a level at a slower tempo
- Improve playback/scrolling performance when extra claps/taps are afoot
- Create a guided review of mistakes, suggested in the final score summary
    - Create an option to practice certain measures from a level
- Rotate every page on a phone at weird times and see what breaks
- Give every glyph a special offset so that counts can be PERFECTLY aligned

POLISH:
- Add `Block.weight` to prevent all that nasty duplication you're doing
- Make `Profile.all` private
- Why did you have to delete the word "export" from howler/index.d.ts every time it occurs to fix the build?
- Write tests that check that all your skills are in the skill tree and all your time signatures have backing loops
- What the heck is the deal with HTML nowadays?

UNICORNS:
- Triplets
- Mixed meter
- Asymmetric meter
- Ties
- Beam compound 6/8 in 1/3s if the whole beat contains syncopation anywhere--then add more syncopation to Very Advanced Compound Time