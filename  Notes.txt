JGSW:
+ Display notation on an HTML page
+ Display notation on an HTML page on someone's computer that doesn't have the Bravura Text font installed
+ Display a time signature object
+ Display note objects
+ Bar automatically
+ Beam automatically
+ Play the rhythm
+ Scroll to where you are as it plays. I think there is a jQuery `scrollTop` property?
+ Count off before playing
+ Accept input & grade!!

+ Store offset info in fractions of a beat, so that you can...
    + create formatters for counts, and
    + add tooltips for details on timing!
+ Make Count a real type to clean up
+ Space extra clap markings according to offset
+ Populate levels based on query strings, by reading from one big ts file
+ Random level generation, based on some parameters to allow for practice of specific skills.
+ Fix bug that causes tooltips to stick forever when they appear during playback (why show them during playback anyway?)
+ Set up local server
+ Load the site on your phone
+ Fix any existing issues
    + Disable iOS double-tap-to-zoom
    + Make tooltips closer to notes
    + Decrease notation size for low-width screens
    + Check for touch events so timing is accurate on mobile devices
+ Make tooltips click to show/hide on phone
    + AUTOMATIC! Thanks Safari for iOS and/or jQuery UI!
+ Hide key commands on phone

+ Show correct counts under the music on graded notes; color the ones that line up with notes & give them the same tooltips as the notes
+ Add a "Tap" button
+ Refactor timing & grading into `MusicEvent`
    + Get timing out of `Note`
    + Move `MusicEvent`s off of `Note` and into a separate `Piece.events` array
    + Get grading out of `Player`... and `Piece`
        + You'll probably need to make `Piece.events` into a custom class to do this
+ Grade beats, coloring beats in the counting
+ Make tooltips mention both beats and notes
+ Grade beats when beats occur
+ Add "extra beat" just like "extra clap"

+ Add a final score summary that appears after the piece is finished
+ Skill tree with requirement lines
+ Refactor `gameData.ts` to add `Skill`, which will have a list of `Level`s--by index, not ID (we'll now do `level.html?skill=something&level=0`)
+ Display levels list when clicking a skill, linking to each level
+ Test browser-local storage by allowing a name change
+ Make browser-local storage saves automatic & allow for registering callbacks
+ Use browser-local storage to save current level for each skill
    + Disable levels within each skill that are past current
    + Alter current level when passing one
    + Show progress bars in skills
    + Style skills: completed, current, locked (oof, that's a LOT of CSS...)
    + Disable entire skills based on requirements
+ Refactor `gameData.ts`--I think `Skill` needs to know its own `id` for most reasonable uses.

+ Rests
    + Pull out `updateTooltipForNoteAtIndex` from `updateAppearanceOfNoteAtIndex`
    + Create `NoteType.restCharacter`
    + Create `Event.shouldPerform` and update grading accordingly
        + Correctness = 0 if clap is nearby
        + All claps are listed as extra
    + Subclass `Note` to `Rest`
    + Create `shouldPerform = false` events for rests in the `Piece` constructor
    + Override `sound` to none
    + Override `notation` to return rest characters
    + Alter beaming logic in `Piece` to account for rests
    + Override `updateTooltipForNoteAtIndex` to provide clearer explanations for rests
+ Swap out ion.sound; it's broken and it's time for type safety anyway
    + Preload performance sounds, though
* Add a working backing loop system
    + Can you scale to account for tempos?
    + Perfectly align scoring with backing loops (right now you have to rush to pass)
    - Flesh out your loop library: we need more time signatures!
    - Allow for multiple loops per time signature, and come up with a clever way of determining index into that array via skill ID and level number, so that it's not Just Random
+ Fix count placement: estimating for the final note using the previous note is totally ineffective; check eighth eighth dotted half for proof.
+ Fix extra problems caused by held key repeats
+ Only count rests if they're on a beat (hah--you made the same mistake your students do!)
+ Totally change scoring so that it's about getting 100%, not 65%. Remove the extras count--it's a weird thing to focus on and its prominence is just an artifact of your model classes.

+ Allow levels to specify values for `TimingDescription.knownCounts`, so we can avoid confusing people on early levels
+ Make `AnyLevel` interface for `Level` to implement and `Skill` to hold
+ Abstract the URL to link to to get to each level into `AnyLevel`
+ Make new `TextLevel` class that holds some HTML, links to a new "text.html" page, which will be pretty simple
+ Fix block system so it can disallow larger blocks from crossing certain boundaries (e.g. eighth/quarter/eighth syncopation starting on beat 2 of common time)
    + Can you add an "allowed start" property to blocks, which is by default "anywhere"?
    + Next, can you let some blocks be required, so that a random piece will be forced to use one of each required block?
+ Mark level types in the skill tree with an icon
+ Incorporate `Piece` constructor parameters directly into `LevelConstructor` to reduce nesting at creation
+ Your estimating just doesn't work; put a span around the final barline and use it for calculations, dangit.
+ Add "Final level in $skill!" to splash.
+ Make randomized pieces regenerate themselves when they're played! This makes them much more interesting!!
+ Make timing accuracy stars harder to earn
+ When you return to an open skill, scroll to the tooltip
+ Can you debounce the Clap & Tap buttons?
+ Show total levels in skill in the title bar for the start window
+ Make "Next Level" go directly to the next level
+ Show level icon on intro window
+ Fix scrolling easing

- Create the actual skill tree
    - Split Eighth Notes into two skills, focus on eighth rests for longer
    - Double levels in the Dots skill--really drill dotted quarters
    - Double levels in the Top Number skill
    - Split Sixteenth Notes into three skills, one per rhythm
    - Double levels in Three Four

- Add cool visuals
    - Space background for world? How can you tie levels into this?
        - Each skill is a planet. Completing levels is "exploring" the planet. Different skills have different backgrounds to match their planet icons?
    - Animation for right/wrong notes while playing
    - Animation for celebrating when you complete a skill/unlock a new one
- Can you store all player progress in a URL? This could allow switching devices!
- Accounts saved on server? based on hash of email; switching accounts on main page
	- If this isn't viable, how can you learn of students' progress?

- MOAR LOOPS!!!11
- Ties
- Can you check counts via speech recognition?
- Add a link to explain why a note has the count it does
- Allow special nodes to include multiple choice or matching quizzes (for note recognition & beat length in time signatures)

POLISH:
- Test thoroughly on Internet Explorer--I hear closure capture within loops causes problems, and you totally do that
- Why did you have to delete the word "export" from howler/index.d.ts every time it occurs to fix the build?
- Fix spacing bug: it seems that offscreen objects don't work with your count/clap placement code.
    - Is this your fault or a limitation of the browser?
    - Can you use `div`s instead of `span`s for your notes, and if so, can you position relative to them? Does that even help?
- Give every glyph a special offset so that counts can be PERFECTLY aligned
- Improve style and content of grading tooltips; focus on important content
- Write tests that check that all your skills are in the skill tree and all your time signatures have backing loops
- Create an option to practice a level at a slower tempo
- Create an option to practice certain measures from a level
- Create a guided review of mistakes, suggested in the final score summary
- Get permission to host the Rhythms font for this project, or make your own
	- I'm concerned about spacing. :( You might need to make a custom font.
- Randomly select from many grading summary messages; students will see them very frequently so they should be varied.
- Move counts & extra claps & anything else relatively positioned when you resize the window
    - Can you achieve this automatically by using em positioning, or attaching them to note spans instead of the parent container?
- What the heck is the deal with HTML nowadays? There are way more kinds of elements than you remember. Are you using them appropriately?
- Close tooltips on manual scroll